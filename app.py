
from dash import Dash, html, dash_table, dcc, callback, Output, Input
import pandas as pd
import plotly.express as px
from new_def import *
# import dash_design_kit as ddk
import os
import gunicorn
data_Y = pd.read_csv("data/Участники anonimized.csv")
data = pd.read_csv("data/Anonimized/Аддитивные технологии.csv")
com_competihon = ['Геодезия.csv', 'Мехатроника.csv', 'Управление качеством.csv', 'Технологии композитов.csv', 'Строительный контроль.csv', 'Инженерное проектирование.csv', 'Информационная безопасность.csv', 'Управление жизненным циклом.csv', 'Бетонные строительные работы.csv', 'Инженерное мышление. Каракури.csv', 'Промышленная механика и монтаж.csv', 'Программные решения для бизнеса.csv', 'Сетевое и системное администрирование.csv', 'Цифровое ПСР-Предприятие (Lean Smart Plant).csv', 'Вывод из эксплуатации объектов использования атомной энергии.csv', 'Корпоративная защита от внутренних угроз информационной безопасности.csv']


app = Dash(__name__)
l=os.listdir('data/Anonimized')

app.layout = html.Div([
    html.Div(children='Кейс от Росатома'),
    dcc.Tabs([
        dcc.Tab(label='Кластеризация', children=[
            "Выбор номинации",
            dcc.Dropdown(
                ['Корпоративная защита от внутренних угроз информационной безопасности', 'Инженер-технолог машиностроения',
                 'Работы на токарных универсальных станках', 'Водитель спецавтомобиля',
                 'Обслуживание и ремонт оборудования релейной защиты и автоматики', 'Машинное обучение и большие данные',
                 'Аддитивные технологии', 'Цифровое ПСР-Предприятие (Lean Smart Plant)', 'Анатилический контроль',
                 'Сетевое и системное администрирование', 'Изготовление прототипов', 'Промышленная автоматика',
                 'Программные решения для бизнеса', 'Бетонные строительные работы', 'Неразрущающий контроль',
                 'Информационная безопасность', 'Управление качеством', 'Строительный контроль',
                 'Токарные работы на станках с ЧПУ',
                 'Квантовые технологии', 'Фрезерные работы на станках с ЧПУ', 'Технологии композитов',
                 'Технологические системы энергетических объектов', 'Инженерное мышление', 'Геодезия', 'Сварочные технологии',
                 'Мехатроника', 'Сметное дело', 'Электромонтаж', 'Промышленная механика и монтаж',
                 'Работы на фрезерных универсальных станках', 'Управление жизненным циклом', 'Радиационный контроль',
                 'Охрана труда', 'Охрана окружающей среды', 'Вывод из эксплуатации объектов использования атомной энергии',
                 'Электроника', 'Инженерное проектирование', 'Инженер-конструктор'],
                 'Корпоративная защита от внутренних угроз информационной безопасности',
                 id='clientside-graph-indicator'),
            "Тип кластеризации",
            dcc.Dropdown(["BPO", "BDO"], "BPO",id='graf'),
            html.H2(style={"text-align": "center"}, children="Пояснение"),
            html.H4( children="1. BPO-Классификация по баллам, Полу, образованию"),
            html.H4( children="1. BDO-Классификация по баллам, Должности, образованию"),
            html.Table(
                children=[
                html.Td([
                dcc.Graph(
                    figure={},
                    id='1-graph',
                    style={'display': 'inline-block'}),
                ]),
                html.Td([
                dcc.Graph(
                    figure={},
                    id='2-graph',
                    style={'display': 'inline-block'})
                ]),
            ]),
        ]),
        dcc.Tab(label="Графики", children=[
            dcc.Dropdown(
                ['Корпоративная защита от внутренних угроз информационной безопасности', 'Инженер-технолог машиностроения',
                 'Работы на токарных универсальных станках', 'Водитель спецавтомобиля',
                 'Обслуживание и ремонт оборудования релейной защиты и автоматики', 'Машинное обучение и большие данные',
                 'Аддитивные технологии', 'Цифровое ПСР-Предприятие (Lean Smart Plant)', 'Анатилический контроль',
                 'Сетевое и системное администрирование', 'Изготовление прототипов', 'Промышленная автоматика',
                 'Программные решения для бизнеса', 'Бетонные строительные работы', 'Неразрущающий контроль',
                 'Информационная безопасность', 'Управление качеством', 'Строительный контроль',
                 'Токарные работы на станках с ЧПУ',
                 'Квантовые технологии', 'Фрезерные работы на станках с ЧПУ', 'Технологии композитов',
                 'Технологические системы энергетических объектов', 'Инженерное мышление', 'Геодезия', 'Сварочные технологии',
                 'Мехатроника', 'Сметное дело', 'Электромонтаж', 'Промышленная механика и монтаж',
                 'Работы на фрезерных универсальных станках', 'Управление жизненным циклом', 'Радиационный контроль',
                 'Охрана труда', 'Охрана окружающей среды', 'Вывод из эксплуатации объектов использования атомной энергии',
                 'Электроника', 'Инженерное проектирование', 'Инженер-конструктор'],
                 'Корпоративная защита от внутренних угроз информационной безопасности',
                 id='clientside-graph-indicator2'),
            dcc.Dropdown(["Баллы, %","Баллы, ед.", "Должностьint","BPO", "BDO"], "Должностьint", id="x" ),
            dcc.Dropdown(["Баллы, %","Баллы, ед.", "Должностьint","BPO", "BDO"], "Баллы, %",id="y"),
            html.Table(
                children=[
                    html.Td([
                    dcc.Graph(
                        figure={},
                        id='3-graph',
                        style={'display': 'inline-block'}),
                    ]),
                    html.Td([
                    dcc.Graph(
                        figure={},
                        id='4-graph',
                        style={'display': 'inline-block'})
                    ]),
                ])

        ])
    ])
])

@callback(Output("3-graph",  component_property='figure'),
          Output("4-graph",  component_property='figure'),
          Input("clientside-graph-indicator2", "value"),
          Input("y", "value"),
          Input("x", "value"))
def graf_2(test, x, y):
    data = pd.read_csv("data/Anonimized/"+test+ ".csv")
    fig = px.scatter(data, x=x, y=y, hover_name="ФИО",)
    fig2 = px.bar(data, x=x, y=y, hover_name="ФИО",)
    return fig,fig2

@callback(Output("1-graph",  component_property='figure'),
          Output("2-graph",  component_property='figure'),
          Input("clientside-graph-indicator", "value"),
          Input("graf", "value"))
def graf_1(X,Y):
    data = pd.read_csv("data/Anonimized/"+X+".csv")
    if Y == "BPO":
        a = "Пол"
    else:
        a = "Должностьint"
    try:
        fig = px.scatter_3d(data, x="Баллы, %", y="Образованиеint", z=a, hover_name="ФИО", color = Y)
        fig2 = px.scatter(data, x="Баллы, %", y="Образованиеint", color=Y)
    except:
        data['Образованиеint'] = 0
        fig = px.scatter_3d(data, x="Баллы, %", y="Образованиеint", z=a, hover_name="ФИО", color=Y)
        fig2 = px.scatter(data, x="Образованиеint", y="Баллы, %", color=Y)
    return fig, fig2
if __name__ == '__main__':
    app.run_server(debug=True)
#
style={
                'display': 'inline-block',
                'vertical-align': 'bottom'},