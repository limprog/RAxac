from dash import Dash, html, dash_table, dcc, callback, Output, Input
import pandas as pd
import plotly.express as px
from new_def import *
# import dash_design_kit as ddk
import os
data_Y = pd.read_csv("data/Участники anonimized.csv")
data = pd.read_csv("data/Anonimized/Аддитивные технологии.csv")
com_competihon = ['Геодезия.csv', 'Мехатроника.csv', 'Управление качеством.csv', 'Технологии композитов.csv', 'Строительный контроль.csv', 'Инженерное проектирование.csv', 'Информационная безопасность.csv', 'Управление жизненным циклом.csv', 'Бетонные строительные работы.csv', 'Инженерное мышление. Каракури.csv', 'Промышленная механика и монтаж.csv', 'Программные решения для бизнеса.csv', 'Сетевое и системное администрирование.csv', 'Цифровое ПСР-Предприятие (Lean Smart Plant).csv', 'Вывод из эксплуатации объектов использования атомной энергии.csv', 'Корпоративная защита от внутренних угроз информационной безопасности.csv']


app = Dash(__name__)
l=os.listdir('data/Anonimized')

app.layout = html.Div([
    html.Div(children='Кейс от Росатома'),
    dcc.Dropdown(
        ['Корпоративная защита от внутренних угроз информационной безопасности', 'Инженер-технолог машиностроения',
         'Работы на токарных универсальных станках', 'Водитель спецавтомобиля',
         'Обслуживание и ремонт оборудования релейной защиты и автоматики', 'Машинное обучение и большие данные',
         'Аддитивные технологии', 'Цифровое ПСР-Предприятие (Lean Smart Plant)', 'Анатилический контроль',
         'Сетевое и системное администрирование', 'Изготовление прототипов', 'Промышленная автоматика',
         'Программные решения для бизнеса', 'Бетонные строительные работы', 'Неразрущающий контроль',
         'Информационная безопасность', 'Управление качеством', 'Строительный контроль',
         'Токарные работы на станках с ЧПУ',
         'Квантовые технологии', 'Фрезерные работы на станках с ЧПУ', 'Технологии композитов',
         'Технологические системы энергетических объектов', 'Инженерное мышление', 'Геодезия', 'Сварочные технологии',
         'Мехатроника', 'Сметное дело', 'Электромонтаж', 'Промышленная механика и монтаж',
         'Работы на фрезерных универсальных станках', 'Управление жизненным циклом', 'Радиационный контроль',
         'Охрана труда', 'Охрана окружающей среды', 'Вывод из эксплуатации объектов использования атомной энергии',
         'Электроника', 'Инженерное проектирование', 'Инженер-конструктор'],
         'Корпоративная защита от внутренних угроз информационной безопасности',
         id='clientside-graph-indicator'),
    "Тип кластерезации",
    dcc.Dropdown(["BPO", "BDO"], "BPO",id='graf'),
    dcc.Graph(
        figure={},
        id='1-graph')
])
@callback(Output("1-graph",  component_property='figure'),
          Input("clientside-graph-indicator", "value"),
          Input("graf", "value"))
def graf_1(X,Y):
    data = pd.read_csv("data/Anonimized/"+X+".csv")
    if Y == "BPO":
        a = "Пол"
    else:
        a = "Должностьint"
    fig = px.scatter_3d(data, x="Баллы, %", y="Образованиеint", z=a, hover_name="ФИО", color = Y)
    return fig
if __name__ == '__main__':
    app.run_server(debug=True)

